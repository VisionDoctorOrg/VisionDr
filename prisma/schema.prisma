// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName             String?
  organizationName     String?
  email                String?      @unique
  type                 Type?
  password             String?
  DOB                  String?
  gender               String?
  occupation           String?
  hobbies              String?
  phoneNumber          String?      @unique
  subscriptionActive   Status       @default(Inactive)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  googleId             String?
  linkedinId           String?
  authProvider         AuthProvider
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  subscriptions      Subscription[]
  medicationReminder MedicationReminder[]

  imageId String? @db.ObjectId
  image   Image?  @relation(fields: [imageId], references: [id])

  refractiveErrorCheck  RefractiveErrorCheck?
  additionalInformation AdditionalInformation?
  glaucoma              Glaucoma?
  caseFile              CaseFile?

  notificationPreference NotificationPreference?
  bloodPressure          BloodPressure?
  visionLevel            VisionLevel?
}

model NotificationPreference {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @unique @db.ObjectId
  email              Boolean  @default(true)
  sms                Boolean  @default(false)
  whatsapp           Boolean  @default(false)
  medicationReminder Boolean  @default(true)
  paymentReminder    Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefractiveErrorCheck {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  medicalHistory          Json?
  visionSymptoms          Json?
  currentVisionCorrection Json?
  lifestyleVisualDemands  Json?
  additionalInformation   Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  userId String? @unique @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

model Glaucoma {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  eyeHealthHistory       Json?
  visionSymptoms         Json?
  lifestyleVisualDemands Json?
  additionalInformation  Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  userId String? @unique @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

model CaseFile {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  mainComplaint        Json?
  eyeHistory           Json?
  medicalHistory       Json?
  lastEyeExamination   Json?
  familyVisualHistory  Json?
  familyMedicalHistory Json?
  allergies            Json?
  currentDrugUse       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @unique @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  fileId String? @db.ObjectId
  file   Image?  @relation(fields: [fileId], references: [id])
}

model AdditionalInformation {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  currentVision String?
  lifeStyle     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @unique @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

model Subscription {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionCode   String    @unique
  userId             String    @db.ObjectId
  plan               String?
  status             String?
  email_token        String?
  amount             Int?
  nextPaymentDate    DateTime?
  authorization_code String?
  last4              String?
  exp_month          String?
  exp_year           String?
  channel            String?
  card_type          String?
  bank               String?
  country_code       String?
  brand              String?
  reusable           Boolean?
  signature          String?
  account_name       String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MedicationReminder {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  medicationName String?
  medicationType String?
  dosage         String?
  duration       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminderTimes MedicationReminderTime[]
}

model MedicationReminderTime {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  medicationReminderId String   @db.ObjectId
  reminderTime         DateTime
  completed            Boolean  @default(false)
  progress             Float    @default(0)

  medicationReminder MedicationReminder @relation(fields: [medicationReminderId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String?
  publicId  String?
  createdAt DateTime @default(now())

  users User[]
  files CaseFile[]
}

model Waitlist {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  organizationName String?
  type             Type
  email            String  @unique
  phone            String
  status           String  @default("waiting")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactUs {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    Type
  email   String
  phone   String
  message String

  createdAt DateTime @default(now())
}

model BloodPressure {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  systolic  Int
  diastolic Int
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VisionLevel {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  visionLevel ColorVisionLevel
  userId      String           @unique @db.ObjectId
  createdAt   DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Type {
  Individual
  Organization
}

enum AuthProvider {
  EMAIL
  GOOGLE
  LINKEDIN
}

enum Status {
  Active
  Inactive
}

enum ColorVisionLevel {
  Normal
  Abnormal
}
