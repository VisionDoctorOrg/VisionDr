// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName             String?
  organizationName     String?
  email                String       @unique
  type                 Type?
  password             String?
  DOB                  String?
  gender               String?
  occupation           String?
  hobbies              String?
  phoneNumber          String?
  subscriptionActive   Status       @default(Inactive)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  googleId             String?
  linkedinId           String?
  authProvider         AuthProvider
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  subscriptions        Subscription[]
  refractiveErrorCheck RefractiveErrorCheck[]

  imageId String? @db.ObjectId
  image   Image?  @relation(fields: [imageId], references: [id])
}

model Subscription {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionCode String   @unique
  userId           String   @db.ObjectId
  plan             String
  status           String
  email_token      String
  amount           Int
  nextPaymentDate  DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String?
  publicId  String?
  createdAt DateTime @default(now())

  users User[]
}

model Waitlist {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  organizationName String?
  type             Type
  email            String  @unique
  phone            String
  status           String  @default("waiting")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactUs {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    Type
  email   String
  phone   String
  message String

  createdAt DateTime @default(now())
}

model RefractiveErrorCheck {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String   @db.ObjectId
  medicalHistory          Json
  visionSymptoms          Json
  currentVisionCorrection Json
  lifestyleVisualDemands  Json
  additionalInformation   Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Type {
  Individual
  Organization
}

enum AuthProvider {
  EMAIL
  GOOGLE
  LINKEDIN
}

enum Status {
  Active
  Inactive
}
